---
#
# Create instances along with associated resources:
#   - instance
#   - elastic ip's
#   - route53 dns entries
#
# This assumes that the base environment has already been created

- name: Create and launch a set of Amazon EC2 instances
  hosts: localhost
  gather_facts: False
  vars:
    win_passwd_dict: {}

  tasks:
    - name: Execute tasks to get the project and credential information
      include_tasks: get_project_cred_info_tasks.yml

    - name: gather information about the VPC
      ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ aws_vpc_name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
      register: vpc_info

    - name: print VPC id information
      debug:
        var: vpc_info.vpcs[0].id
        verbosity: 1
      when: vpc_info.vpcs is defined

    - name: get security group facts
      ec2_group_info:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
          group-name: "{{ aws_securitygroup_name }}"
      register: security_group_info
      when: vpc_info.vpcs is defined

    - name: print security group info
      debug:
        var: security_group_info
        verbosity: 1

    - name: print security group id info
      debug:
        var: security_group_info.security_groups[0].group_id
        verbosity: 1
      when: security_group_info is defined

    - name: get subnet facts
      ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
          "tag:Name": "{{ aws_subnet_name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
      register: subnet_info
      when: vpc_info.vpcs is defined

    - name: print subnet info
      debug:
        var: subnet_info
        verbosity: 1

    - name: print subnet id info
      debug:
        var: subnet_info.subnets[0].id
        verbosity: 1
      when: subnet_info is defined

#    - name: create and launch instance
#      ec2:
#        key_name: "{{ aws_keypair }}"
#        group_id: "{{ security_group_info.security_groups[0].group_id }}"
#        instance_type: "{{ item.aws_instance_type }}"
#        image: "{{ item.aws_image }}"
#        wait: true
#        profile: "{{ aws_profile }}"
#        region: "{{ aws_region }}"
#        vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
#        exact_count: "{{ item.aws_exact_count }}"
#        count_tag:
#          Name: "{{ aws_base_name }}-count"
#        instance_tags:
#          Name: "{{ aws_base_name }}-{{ item.ansible_instance_shortname }}"
#        volumes:
#          - device_name: /dev/sdb
#            volume_type: gp2
#            volume_size: 10
#            delete_on_termination: True
#        assign_public_ip: "{{ item.aws_assign_public_ip }}"
#      with_items: "{{ aws_instances }}"
#      register: instances_info

#    - name: define fact for Windows systems
#      set_fact:
#        windows_tower_callback:
#          windows: 'True'
#          set_password: "{{ windows_admin_password }}"

    - name: create and launch instance
      ec2_instance:
        image_id: "{{ item.aws_image_id }}"
        instance_type: "{{ item.aws_instance_type }}"
        key_name: "{{ aws_keypair }}"
        name: "{{ aws_base_name }}-{{ item.ansible_instance_shortname }}"
        network:
          assign_public_ip: "{{ item.aws_assign_public_ip }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        security_group: "{{ security_group_info.security_groups[0].group_id }}"
#        tower_callback.windows: "{{ ('True') if (item.instance_os_type == 'Windows') else omit }}"
#        tower_callback.set_password: "{{ windows_admin_password if (item.instance_os_type == 'Windows') else omit }}"
        state: present
        tags:
          OS_Type: "{{ item.instance_os_type }}"
        user_data: "{{ lookup('file', 'win_ec2_user_data.ps1') if (item.instance_os_type == 'Windows') else omit }}"
        volumes: "{{ item.aws_volume_list }}"
#        volumes:
#          - device_name: /dev/sda1
#            ebs:
#              volume_size: 40
#              delete_on_termination: True
        vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
        wait: true
      with_items: "{{ aws_instances }}"
      register: instances_info

    - name: print instance info
      debug:
        var: instances_info.results
        verbosity: 1

    - name: print instance ids
      debug:
        msg: "instance id = {{ item.instance_ids[0] }}"
        verbosity: 1
      with_items: "{{ instances_info.results }}"

    - name: Define common Linux host variables
      set_fact:
        common_linux_hostvars: "ansible_user={{ aws_linux_ansible_user }} ansible_ssh_private_key_file={{ aws_keypair_key_file }}"

    - name: Define common Windows host variables
      set_fact:
        common_windows_hostvars: "ansible_user={{ windows_admin_username }} ansible_password={{ windows_admin_password }} ansible_connection=winrm ansible_winrm_transport=ntlm ansible_port=5985 ansible_winrm_server_cert_validation=ignore"

# TODO:  add tag information

    - name: Generate elastic IP for instances
      ec2_eip:
        device_id: "{{ item.instance_ids[0] }}"
        in_vpc: True
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        release_on_disassociation: yes
#        tag_name: "Name"
#        tag_value: "{{ item.instances[0].key_name }}"
      with_items: "{{ instances_info.results }}"
      register: eip_info

    - name: print eip info
      debug:
        msg: "{{ item.allocation_id }} has Name: {{ item['item'].instances[0].tags.Name }}"
        verbosity: 1
      with_items: "{{ eip_info.results }}"

    - name: tag eip
      ec2_tag:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        resource: "{{ item.allocation_id }}"
        state: present
        tags:
          Name: "{{ item['item'].instances[0].tags.Name }}"
      with_items: "{{ eip_info.results }}"

    - name: print elastic IP info
      debug:
        var: eip_info.results
        verbosity: 1

    - name: print the dns name
      debug:
        msg: "hostname {{ item['item'].instances[0].tags.Name }}.{{ aws_route53_zone }} has IP {{ item.public_ip }}"
        verbosity: 1
      with_items: "{{ eip_info.results }}"

    - name: Generate route53 entry for the elastic IP
      route53:
        profile: "{{ aws_profile }}"
        record: "{{ item['item'].instances[0].tags.Name }}.{{ aws_route53_zone }}"
        state: present
        ttl: 300
        type: A
        value: "{{ item.public_ip }}"
        wait: Yes
        zone: "{{ aws_route53_zone }}"
      with_items: "{{ eip_info.results }}"
      register: route53_info

    - name: Print route53 dns info
      debug:
        var: route53_info
        verbosity: 1

    - name: Print state of instances
      debug:
        msg: " Instance {{ item['item'].instances[0].tags.Name }} is {{ item['item'].instances[0].state.name }}"
        verbosity: 1
      with_items: "{{ eip_info.results }}"

    - name: Print eip instance ID
      debug:
        msg: "EIP instance ID is {{ item['item'].instances[0].instance_id }}" 
        verbosity: 1
      with_items: "{{ eip_info.results }}"

    - name: Loop over the tasks file that will get the Windows passwords and create a dictionary
      include_tasks: instance_create_tasks.yml
      with_items: "{{ eip_info.results }}"

    - name: Print Windows password dictionary
      debug:
        var: win_passwd_dict
        verbosity: 1

    - name: Add new instance to host group, if the instance has been marked as having changed
      add_host:
        hostname: "{{ item['item'].instances[0].tags.Name }}.{{ aws_route53_zone }}"
        groupname: launched
        ansible_ssh_extra_args: "{{ ('-o StrictHostKeyChecking=no') if (item['item'].instances[0].tags.OS_Type == 'Linux') else omit }}"
        ansible_user: "{{ aws_linux_ansible_user if (item['item'].instances[0].tags.OS_Type == 'Linux') else windows_admin_username }}"
        ansible_ssh_private_key_file: "{{ aws_keypair_key_file if (item['item'].instances[0].tags.OS_Type == 'Linux') else omit }}"
#        ansible_password: "{{ windows_admin_password if (item['item'].instances[0].tags.OS_Type == 'Windows') else omit }}"
        ansible_password: "{{ win_passwd_dict[item['item'].instances[0].tags.Name] if (item['item'].instances[0].tags.OS_Type == 'Windows') else omit }}"
        ansible_connection: "{{ ('winrm') if (item['item'].instances[0].tags.OS_Type == 'Windows') else omit }}"
        ansible_winrm_transport: "{{ ('ntlm') if (item['item'].instances[0].tags.OS_Type == 'Windows') else omit }}"
        ansible_port: "{{ ('5985') if (item['item'].instances[0].tags.OS_Type == 'Windows') else omit }}"
        specified_os_type: "{{ item['item'].instances[0].tags.OS_Type }}"
      with_items: "{{ eip_info.results }}"
      when: item.changed

    - name: cleanout previous dynamic inventory file
      file:
        path: "{{ aws_inventory_file }}"
        state: absent
      when: aws_inventory_file is defined

    - name: add instances to the dynamic inventory file
      lineinfile:
        create: True
        line: "{{ item['item'].instances[0].tags.Name }}.{{ aws_route53_zone }} specified_os_type={{ item['item'].instances[0].tags.OS_Type }} {{ common_linux_hostvars if (item['item'].instances[0].tags.OS_Type == 'Linux') else common_windows_hostvars }}"
        mode: "0644"
        path: "{{ aws_inventory_file }}"
        state: present
      with_items: "{{ eip_info.results }}"
      when: aws_inventory_file is defined

    - name: Print platform if it is defined
      debug:
        msg: "Platform for instance {{ item['item'].instances[0].tags.Name }} is {{ item['item'].instances[0].platform }}"
        verbosity: 1
      with_items: "{{ eip_info.results }}"
      when: item['item'].instances[0].platform is defined

- name: Play to test connectivity to newly-created instances and to update Windows password
  hosts: launched
#  gather_facts: False
#
# This play defines the ssh key to use for remote access via the Ansible variable ansible_ssh_private_key_file
# This can also be specified on the command line (--key-file <mykey.pem>) or as part of the inventory for a host
# or a group.  A handy reference is https://stackoverflow.com/questions/44734179/specifying-ssh-key-in-ansible-playbook-file
#
#  vars:
#    ansible_user: ec2-user
#    ansible_ssh_private_key_file: "{{ aws_keypair_key_file }}"
##  environment:
##    ANSIBLE_HOST_KEY_CHECKING: False

  tasks:

    - name: Print name of host
      debug:
        msg: "Working on host {{ inventory_hostname }} with os type of {{ hostvars[inventory_hostname]['specified_os_type'] }}"

    - name: Print all host variables
      debug:
        msg: "{{ inventory_hostname }} host variables {{ hostvars[inventory_hostname] }}"
        verbosity: 1

#
# Could use module wait_for_connection.  It supports both Linux and Windows targets but uses ping/win_ping
#

    - name: Wait for SSH port to be open
      wait_for:
        delay: 10
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        timeout: 320
      when: hostvars[inventory_hostname]['specified_os_type'] == "Linux"

    - name: Wait for RDP port to be open
      win_wait_for:
        delay: 10
        host: "{{ inventory_hostname }}"
        port: 5985
        state: started
        timeout: 320
      when: hostvars[inventory_hostname]['specified_os_type'] == "Windows"

    - name: Run ping
      ping:
      when: hostvars[inventory_hostname]['specified_os_type'] == "Linux"

    - name: Run win_ping
      win_ping:
      when: hostvars[inventory_hostname]['specified_os_type'] == "Windows"

#    - name: Gather facts for Linux systems
#      setup:
#      when: hostvars[inventory_hostname]['specified_os_type'] == "Linux"

    - name: Print ansible_facts
      debug:
        var: ansible_facts
        verbosity: 1

    - name: Block to disable AWS RHUI and to set the hostname for RedHat systems
      block:

        - name: Ensure the AWS client is removed
          yum:
            name: "rh-amazon-rhui-client*"
            state: absent

        - name: Ensure yum plugin configuration is correct
          copy:
            dest: /etc/yum/pluginconf.d/product-id.conf
            src: files/product-id.conf

        - name: Print the hostname
          debug:
            msg: "Setting the hostname to {{ inventory_hostname }}"

        - name: Update the hostname
          command: "hostnamectl set-hostname {{ inventory_hostname }}"

#        - name: Update the hostname
#          ansible.builtin.hostname:
#            name: "{{ inventory_hostname }}"
#            use: redhat

      when: ansible_facts['distribution'] is defined and ansible_facts['distribution'] == "RedHat"
      become: True
#     End block for RedHat systems
#     Reference:  https://access.redhat.com/documentation/en-us/red_hat_satellite/6.3/html/installation_guide/running_red_hat_satellite_on_amazon_web_services

    - name: Change the Administrator password
      win_user:
        name: Administrator
#        password: "{{ windows_admin_password }}"
        password: "{{ hostvars[inventory_hostname]['ansible_password'] }}"
      when: hostvars[inventory_hostname]['specified_os_type'] == "Windows"
