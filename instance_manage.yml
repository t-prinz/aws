---
#
# Manages the state of the instances by specifying a tag, e.g.
#
# ansible-playbook -i <inventory> instance_manage.yml --tags stop
#
# Tag options:
#
#   stop: stop the instances
#   start: start instances
#   delete: delete instances and all resources associated with the instances:
#     - route53 dns entries
#     - elastic ip's
#     - instance
#
- name: Manage instances (note use of tags "stop," "start," and "delete")
  hosts: localhost
  gather_facts: False

  tasks:
    - name: Execute tasks to get the project and credential information
      include_tasks: get_project_cred_info_tasks.yml
      tags:
        - always

    - name: gather information about the VPC
      ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ aws_vpc_name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
      register: vpc_info
      tags:
        - always

    - name: print VPC information
      debug:
        var: vpc_info
        verbosity: 1
      tags:
        - always

    - name: print VPC id information
      debug:
        var: vpc_info.vpcs[0].id
        verbosity: 1
      tags:
        - always

    - name: get instance info
      ec2_instance_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
      register: instance_info
      tags:
        - always

    - name: print instance info
      debug:
        var: instance_info
        verbosity: 1
      tags:
        - always

    - name: print individual instance id's
      debug:
        var: item.instance_id
        verbosity: 1
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: print instance tag "Name"
      debug:
        var: item.tags.Name
        verbosity: 1
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: get elastic ip info
      ec2_eip_info:
        filters:
          tag:Name: "{{ item.tags.Name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
      register: eip_info
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: print elastic ip info
      debug:
        var: eip_info
        verbosity: 1
      tags:
        - always

    - name: get route53 dns info
      block:
        - name: get route53 zone id
          route53_zone:
            profile: "{{ aws_profile }}"
            zone: "{{ aws_route53_zone }}"
          register: route53_zone_info
          tags:
            - always

        - name: get route53 dns info for the instances
          route53_info:
            profile: "{{ aws_profile }}"
            type: A
            query: record_sets
            hosted_zone_id: "{{ route53_zone_info.zone_id }}"
            max_items: "{{ '1'|int }}"
            start_record_name: "{{ item.addresses[0].tags.Name }}.{{ aws_route53_zone }}"
          when: item.addresses[0].tags.Name is defined
          with_items: "{{ eip_info.results }}"
          register: route53_out
          tags:
            - always

        - name: print route53 dns info
          debug:
            var: route53_out
            verbosity: 1
          tags:
            - always

    - name: stop instances
      ec2_instance:
        image_id: "{{ item.image_id }}"
        instance_ids: "{{ item.instance_id }}"
        instance_type: "{{ item.instance_type }}"
        name: "{{ item.tags.Name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        state: stopped
      with_items: "{{ instance_info.instances }}"
      tags:
        - never
        - stop

    - name: start instances
      ec2_instance:
        image_id: "{{ item.image_id }}"
        instance_ids: "{{ item.instance_id }}"
        instance_type: "{{ item.instance_type }}"
        name: "{{ item.tags.Name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        state: started
      with_items: "{{ instance_info.instances }}"
      tags:
        - never
        - start

    - name: delete resources associated with the instances
      block:
        - name: delete the route53 dns entries
          route53:
            profile: "{{ aws_profile }}"
            record: "{{ item.ResourceRecordSets[0].Name }}"
            state: absent
            ttl: "{{ item.ResourceRecordSets[0].TTL }}"
            type: "{{ item.ResourceRecordSets[0].Type }}"
            value: "{{ item.ResourceRecordSets[0].ResourceRecords[0].Value }}"
            wait: Yes
#            wait: No
            zone: "{{ aws_route53_zone }}"
          when: item.ResourceRecordSets[0].Name is defined
          with_items: "{{ route53_out.results }}"

        - name: delete the elastic ip's from the instances
          ec2_eip:
            device_id: "{{ item.addresses[0].instance_id }}"
            public_ip: "{{ item.addresses[0].public_ip }}"
            profile: "{{ aws_profile }}"
            region: "{{ aws_region }}"
            release_on_disassociation: yes
            state: absent
          when: item.addresses[0].instance_id is defined
          with_items: "{{ eip_info.results }}"

        - name: delete the instances
          ec2_instance:
            image_id: "{{ item.image_id }}"
            instance_ids: "{{ item.instance_id }}"
            instance_type: "{{ item.instance_type }}"
            name: "{{ item.tags.Name }}"
            profile: "{{ aws_profile }}"
            region: "{{ aws_region }}"
            state: absent
          with_items: "{{ instance_info.instances }}"

        - name: cleanout previous dynamic inventory file
          file:
            path: "{{ aws_inventory_file }}"
            state: absent
          when: aws_inventory_file is defined
      tags:
        - never
        - delete
