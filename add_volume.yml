---
#
# Adds a volume to an instance
#
# ansible-playbook -i inventory instance_manage --tags stop
#
- name: Add a volume to an instance
  hosts: localhost
  gather_facts: False
  vars_files:
    - vars/aws_vars.yml
  vars:
    target_instance_tag_name: "tprinz-win2019"
    target_instance_pub_dns_name: "ec2-54-145-210-201.compute-1.amazonaws.com"
    vol_info:
      - vol_tags: tprinz-Binaries
        vol_device_name: /dev/xvde
        vol_volume_size: 1
        vol_volume_type: "standard"
      - vol_tags: tprinz-Data
        vol_device_name: /dev/xvds
        vol_volume_size: 2
        vol_volume_type: "standard"
      - vol_tags: tprinz-Logs
        vol_device_name: /dev/xvdl
        vol_volume_size: 3
        vol_volume_type: "standard"
      - vol_tags: tprinz-Backups
        vol_device_name: /dev/xvdg
        vol_volume_size: 4
        vol_volume_type: "standard"

  tasks:
    - name: gather information about the VPC
      ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ aws_vpc_name }}"
        region: "{{ aws_region }}"
      register: vpc_info
      tags:
        - always

    - name: print VPC information
      debug:
        var: vpc_info
        verbosity: 1
      tags:
        - always

    - name: print VPC id information
      debug:
        var: vpc_info.vpcs[0].id
        verbosity: 1
      tags:
        - always

    - name: get instance info
      ec2_instance_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws_region }}"
      register: instance_info
      tags:
        - always

    - name: print instance info
      debug:
        var: instance_info
        verbosity: 1
      tags:
        - always

    - name: print individual instance id's
      debug:
        var: item.instance_id
        verbosity: 1
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: obtain ec2 instance id
      set_fact:
        target_instance_id: "{{ item.instance_id }}"
      with_items: "{{ instance_info.instances }}"
      when: item.tags.Name == "{{ target_instance_tag_name }}"
      tags:
        - always

    - name: obtain ec2 instance id based on public dns name
      set_fact:
        target_instance_id_pub_dns: "{{ item.instance_id }}"
      with_items: "{{ instance_info.instances }}"
      when: item.public_dns_name == "{{ target_instance_pub_dns_name }}"
      tags:
        - always

    - name: print target instance id
      debug:
        var: target_instance_id
        verbosity: 1
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: print target instance id based on public dns name
      debug:
        var: target_instance_id_pub_dns
        verbosity: 1
      with_items: "{{ instance_info.instances }}"
      tags:
        - always

    - name: print volume info
      debug:
        msg: "Creating device {{ item.vol_device_name }}, {{ item.vol_tags }}, {{ item.vol_volume_size }}GiB, {{ item.vol_volume_type }}"
      with_items: "{{ vol_info }}"

    - name: create desired volumes
      ec2_vol:
        delete_on_termination: yes
        device_name: "{{ item.vol_device_name }}"
        instance: "{{ target_instance_id_pub_dns }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ item.vol_tags }}"
        volume_size: "{{ item.vol_volume_size }}"
        volume_type: "{{ item.vol_volume_type }}"
      with_items: "{{ vol_info }}"
      register: vol_status

    - name: print vol_status
      debug:
        var: vol_status
